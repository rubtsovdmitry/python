import bext, sys


class Bucket:
    BUCKET_tuple = (8, 5, 3)
    CHECK_PASS = 4
    EMPTY = "      "
    WATER = "üü¶üü¶üü¶"
    count_move = 0

    """–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
    def __init__(self) -> None:
        self.__bucket8 = self.__initialize_bucket8()                                                                # —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–µ –≤–µ–¥—Ä–æ –ø–µ—Ä–≤–æ–µ –≤ —É—Å–ª–æ–≤–∏–∏ (8 –ª–∏—Ç—Ä–æ–≤) ['      ', '      ', '      ', '      ', '      ', '      ', '      ', '      ']
        self.__bucket5 = self.__initialize_bucket5()                                                                # —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–µ –≤–µ–¥—Ä–æ –ø–µ—Ä–≤–æ–µ –≤ —É—Å–ª–æ–≤–∏–∏ (5 –ª–∏—Ç—Ä–æ–≤) ['      ', '      ', '      ', '      ', '      ']
        self.__bucket3 = self.__initialize_bucket3()                                                                # —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–µ –≤–µ–¥—Ä–æ –ø–µ—Ä–≤–æ–µ –≤ —É—Å–ª–æ–≤–∏–∏ (3 –ª–∏—Ç—Ä–∞) ['      ', '      ', '      ']
        
    """addon –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    def __initialize_bucket8(self):
        temp = []
        for i in range(__class__.BUCKET_tuple[0]):
            temp.append(__class__.EMPTY)
        return temp
    
    """addon2 –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    def __initialize_bucket5(self):
        temp = []
        for i in range(__class__.BUCKET_tuple[1]):
            temp.append(__class__.EMPTY)
        return temp
    
    """addon3 –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    def __initialize_bucket3(self):
        temp = []
        for i in range(__class__.BUCKET_tuple[2]):
            temp.append(__class__.EMPTY)
        return temp
    
    """—Å–æ–∑–¥–∞–¥–∏–º getter –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ (–ø–µ—Ä–≤–æ–µ –≤–µ–¥—Ä–æ)"""
    def get_1_bucket(self):
        return self.__bucket8
    """—Å–æ–∑–¥–∞–¥–∏–º setter –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞"""
    def set_1_bucket(self, value):
        self.__bucket8 = value
    my_object_1_bucket = property(get_1_bucket, set_1_bucket)

    """—Å–æ–∑–¥–∞–¥–∏–º getter –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ (–≤—Ç–æ—Ä–æ–µ –≤–µ–¥—Ä–æ)"""
    def get_2_bucket(self):
        return self.__bucket5
    """—Å–æ–∑–¥–∞–¥–∏–º setter –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞"""
    def set_2_bucket(self, value):
        self.__bucket5 = value
    my_object_2_bucket = property(get_2_bucket, set_2_bucket)

    """—Å–æ–∑–¥–∞–¥–∏–º getter –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ (—Ç—Ä–µ—Ç—å–µ –≤–µ–¥—Ä–æ)"""
    def get_3_bucket(self):
        return self.__bucket3
    """—Å–æ–∑–¥–∞–¥–∏–º setter –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞"""
    def set_3_bucket(self, value):
        self.__bucket3 = value
    my_object_3_bucket = property(get_3_bucket, set_3_bucket)

    """–º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
    def visualization(self):            
        temp = self.__bucket8 + self.__bucket5 + self.__bucket3
        bext.clear()
        print('''
8|{7}|
7|{6}|
6|{5}|
5|{4}|  5|{12}|
4|{3}|  4|{11}|
3|{2}|  3|{10}|  3|{15}|
2|{1}|  2|{9}|  2|{14}|
1|{0}|  1|{8}|  1|{13}|
 +------+   +------+   +------+
    8–ª         5–ª         3–ª
'''.format(*temp))  

    """–º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–¥—Ä–∞ –≤–æ–¥–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    def fill_the_bucket(self, liters):
        if liters == 8:
            self.__bucket8 = []
            for i in range(__class__.BUCKET_tuple[0]):
                self.__bucket8.append(__class__.WATER)
        elif liters == 5:
            self.__bucket5 = []
            for i in range(__class__.BUCKET_tuple[1]):
                self.__bucket5.append(__class__.WATER)
        elif liters == 3:
            self.__bucket3 = []
            for i in range(__class__.BUCKET_tuple[2]):
                self.__bucket3.append(__class__.WATER)       

    """–º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –≤–µ–¥—Ä–∞"""
    def empty_the_bucket(self, liters):
        if liters == 8:
            self.__bucket8 = []
            for i in range(__class__.BUCKET_tuple[0]):
                self.__bucket8.append(__class__.EMPTY)
        elif liters == 5:
            self.__bucket5 = []
            for i in range(__class__.BUCKET_tuple[1]):
                self.__bucket5.append(__class__.EMPTY)
        elif liters == 3:
            self.__bucket3 = []
            for i in range(__class__.BUCKET_tuple[2]):
                self.__bucket3.append(__class__.EMPTY)       

    """–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ë–¥–µ—Ä –ø—Ä–∏ –ø–µ—Ä–∏–ª–∏–≤–∞–Ω–∏–∏"""
    def check_name_overflow_water(self, first, second):
        if first in __class__.BUCKET_tuple and second in __class__.BUCKET_tuple:
            return True
        else:
            return False

    """–º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞ –≤–æ–¥—ã –∏–∑ –≤–µ–¥—Ä–∞ –≤ –≤–µ–¥—Ä–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–Ω–∏–º–∞–µ—Ç –≤–æ–¥—É –∏–∑ –≤–µ–¥—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.  
    –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∏–≤–∞–µ–º –≤–æ –≤—Ç–æ—Ä–æ–µ –≤–µ–¥—Ä–æ"""
    def out_overflow_water(self, first, second):
        if first == __class__.BUCKET_tuple[0]:
            first = self.__bucket8
        elif first == __class__.BUCKET_tuple[1]:
            first = self.__bucket5
        else:
            first = self.__bucket3 
        if second == __class__.BUCKET_tuple[0]:
            second = self.__bucket8
        elif second == __class__.BUCKET_tuple[1]:
            second = self.__bucket5
        else:
            second = self.__bucket3
                
        liters_in_first = first.count(__class__.WATER)                                                              # int. –õ–∏—Ç—Ä–æ–≤ –≤ –≤–µ–¥—Ä–µ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        empty_space_in_second = second.count(__class__.EMPTY)                                                       # int. –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –≤ —Ü–µ–ª–µ–≤–æ–º –≤–µ–¥—Ä–µ
        transferable_liters = min(liters_in_first, empty_space_in_second)                                           # int. –ö–æ–ª-–≤–æ –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–ª—å—ë—Ç—Å—è –≤ –∏—Ç–æ–≥–µ
        
        """—É–º–µ–Ω—å—à–∏–º –≤–æ–¥—É –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ, —Ç.–µ. –≤ –ø–µ—Ä–≤–æ–º –≤–µ–¥—Ä–µ"""
        temp = transferable_liters                                                                                  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—É–Ω—Ç–µ—Ä
        first = first[::-1]                                                                                         # –ø–µ—Ä–µ–≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫ —Å –≤–æ–¥–æ–π, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ª–∏–≤–∞—Ç—å –≤–æ–¥—É –∏–∑ –≤–µ–¥—Ä–∞
        for index, i in enumerate(first):
            if temp == 0:
                break
            if i == __class__.WATER:
                first[index] = __class__.EMPTY
                temp -= 1
        first = first[::-1]                                                                                         # –ø–µ—Ä–µ–≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫ —Å –≤–æ–¥–æ–π –æ–±—Ä–∞—Ç–Ω–æ, –≤ –∏—Ç–æ–≥–µ —É –Ω–∞—Å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∏ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –∏ –≤–µ–∑–¥–µ –º–µ–Ω—è—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        if len(self.my_object_1_bucket) == len(first):
            self.my_object_1_bucket = first
        elif len(self.my_object_2_bucket) == len(first):
            self.my_object_2_bucket = first
        elif len(self.my_object_3_bucket) == len(first):
            self.my_object_3_bucket = first
        return transferable_liters                                                                                  # int
    
    """–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–¥—É –≤–æ –≤—Ç–æ—Ä–æ–µ –≤–µ–¥—Ä–æ"""
    def in_overflow_water(self, second, liters):
        if second == __class__.BUCKET_tuple[0]:
            second = self.__bucket8
        elif second == __class__.BUCKET_tuple[1]:
            second = self.__bucket5
        else:
            second = self.__bucket3

        """—É–≤–µ–ª–∏—á–µ–º –≤–æ–¥—É –≤ —Ü–µ–ª–µ–≤–æ–º –≤–µ–¥—Ä–µ"""
        for index, i in enumerate(second):
            if liters == 0:
                break
            if i == __class__.EMPTY:
                second[index] = __class__.WATER
                liters -= 1
        if len(self.my_object_1_bucket) == len(second):
            self.my_object_1_bucket = second
        elif len(self.my_object_2_bucket) == len(second):
            self.my_object_2_bucket = second
        elif len(self.my_object_3_bucket) == len(second):
            self.my_object_3_bucket = second

    """–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞"""
    def finish(self):
        if self.my_object_1_bucket.count(__class__.WATER) == __class__.CHECK_PASS:
            print("–ü–æ–±–µ–¥–∞!!!")
            sys.exit()
        elif self.my_object_2_bucket.count(__class__.WATER) == __class__.CHECK_PASS:
            print("–ü–æ–±–µ–¥–∞!!!")
            sys.exit()
        elif self.my_object_3_bucket.count(__class__.WATER) == __class__.CHECK_PASS:
            print("–ü–æ–±–µ–¥–∞!!!")
            sys.exit()


def main():
    text = "–ì–û–õ–û–í–û–õ–û–ú–ö–ê –° –í–Å–î–†–ê–ú–ò." 
    bext.clear()
    bext.fg("magenta")
    WIDTH, HEIGHT = bext.size()
    bext.goto((int(WIDTH / 2) - int(len(text) / 2)), int(HEIGHT / 3))
    print(text)

    text = "–î–∞–Ω–æ —Ç—Ä–∏ –≤–µ–¥—Ä–∞: 8–ª, 5–ª –∏ 3–ª. –ù—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 4–ª –≤–æ–¥—ã –≤ –ª—é–±–æ–º –∏–∑ –≤—ë–¥–µ—Ä."
    WIDTH, HEIGHT = bext.size()
    bext.goto((int(WIDTH / 2) - int(len(text) / 2)), (int(HEIGHT / 3) + 3))
    print(text)

    text = "–ù–∞–∂–º–∏—Ç–µ <Enter> –¥–ª—è –Ω–∞—á–∞–ª–∞. "
    WIDTH, HEIGHT = bext.size()
    bext.goto((int(WIDTH / 2) - int(len(text) / 2 - 1)), (int(HEIGHT / 3) + 6))
    input(f"{text} >")
    
    game = Bucket()
    
    """–û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ò–ì–†–´"""
    while True:        
        print()
        game.visualization()
        print('–ö–∞–∫–∏–µ –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è:')
        print('(–ù)–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ–¥—Ä–æ')
        print('(–í)—ã–ª–∏—Ç—å –≤–µ–¥—Ä–æ')
        print('(–ü)–µ—Ä–µ–ª–µ–π—Ç–µ –æ–¥–Ω–æ –≤–µ–¥—Ä–æ –≤ –¥—Ä—É–≥–æ–µ')
        print('(–ó)–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É')
        
        # –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        while True:
            print()  
            move = input('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É > ').upper()
            if move == '–ó':
                print()
                print('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!')
                sys.exit()
            if move in ('–ù', '–í', '–ü'):
                break
            print()
            print('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ: "–ù", "–í", "–ü" –∏–ª–∏ "–ó"')

        # –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ–¥—Ä–æ
        if move == "–ù":
            while True:  
                print()
                print('–í—ã–±—Ä–∞—Ç—å –≤–µ–¥—Ä–æ: 8, 5, 3.')
                bucket_1 = input('> ').upper()
                if bucket_1 in [str(i) for i in Bucket.BUCKET_tuple]:
                    break
                else:
                    print("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.")
            game.fill_the_bucket(int(bucket_1))

        
        # –≤—ã–ª–∏—Ç—å –≤–µ–¥—Ä–æ
        elif move == "–í":
            while True:  
                print()
                print('–í—ã–±—Ä–∞—Ç—å –≤–µ–¥—Ä–æ: 8, 5, 3.')
                bucket_1 = input('> ').upper()
                if bucket_1 in [str(i) for i in Bucket.BUCKET_tuple]:
                    break
                else:
                    print("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.")
            game.empty_the_bucket(int(bucket_1))

        # –ø–µ—Ä–µ–ª–∏—Ç—å –≤–µ–¥—Ä–æ –≤ –¥—Ä—É–≥–æ–µ
        elif move == "–ü":
            while True:  
                print()
                print('–í—ã–±—Ä–∞—Ç—å –≤–µ–¥—Ä–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ–ª–∏–≤–∞–µ–º –≤–æ–¥—É: 8, 5, 3.')
                bucket_1 = input('> ').upper()
                print('–í—ã–±—Ä–∞—Ç—å –≤–µ–¥—Ä–æ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–ª–∏–≤–∞–µ–º –≤–æ–¥—É: 8, 5, 3.')
                bucket_2 = input('> ').upper()
                if bucket_1 in [str(i) for i in Bucket.BUCKET_tuple] and bucket_2 in [str(i) for i in Bucket.BUCKET_tuple]:
                    break
                else:
                    print("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.")
            amount_liters = game.out_overflow_water(int(bucket_1), int(bucket_2))
            game.in_overflow_water(int(bucket_2), amount_liters)
            game.visualization()

        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–±–µ–¥—É
        game.finish()
            

if __name__ == '__main__':
    main()